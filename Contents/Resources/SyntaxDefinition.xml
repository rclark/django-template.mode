<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

	<head>
		<name>Django-Template</name> <!-- The definitions title -->
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@":]]></charsintokens> 
		<charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@</="!]]></charsincompletion> 
		<folding toplevel="3" />
	</head>

	<states>

		<default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" scope="meta.default">

			<import mode="XML" keywords-only="yes"/>

            <state id="Django Block Comment" type="comment" color="#236E25" invert-color="#91DC93" font-style="italic" useforautocomplete="no" scope="comment.line.double-slash">
				<begin>
					<regex>{% comment %}</regex>
				</begin>
				<end>
				    <regex>{% endcomment %}</regex>
				</end>
				<keywords id="Template Tag" color="#DD0000" invert-color="#FF2121" useforautocomplete="yes" scope="markup.processing.languageswitch">
					<regex>({%|%})</regex>
				</keywords>
				<keywords id="Template Tags" color="#881350" invert-color="#EC76B4" useforautocomplete="yes" scope="keyword.control">
					<!-- Template Tags -->
					<string>comment</string>
					<string>endcomment</string>
				</keywords>
			</state>
			<state id="Django-Template" color="#000000" usesymbolsfrommode="Django-Template" useautocompletefrommode="Django-Template" scope="language.variable">
				<begin>
					<regex>{[{%]</regex>
				</begin>
				<end>
					<regex>[}%]}</regex>
				</end>
				<keywords id="Template Tag" color="#DD0000" invert-color="#FF2121" useforautocomplete="yes" scope="markup.processing.languageswitch">
					<regex>({%|%})</regex>
				</keywords>
				<keywords id="Template Tags" color="#881350" invert-color="#EC76B4" useforautocomplete="yes" scope="keyword.control">
					<!-- Template Tags -->
					<string>autoescape</string>
					<string>block</string>
					<string>cache</string>
					<string>comment</string>
					<string>csrf_token</string>
					<string>cycle</string>
					<string>debug</string>
					<string>else</string>
					<string>empty</string>
					<string>endautoescape</string>
					<string>endblock</string>
					<string>endcache</string>
					<string>endcomment</string>
					<string>endfilter</string>
					<string>endfor</string>
					<string>endif</string>
					<string>endifchanged</string>
					<string>endifequal</string>
					<string>endifnotequal</string>
					<string>endspaceless</string>
					<string>endwith</string>
					<string>extends</string>
					<string>filter</string>
					<string>firstof</string>
					<string>for</string>
					<string>if</string>
					<string>ifchanged</string>
					<string>ifequal</string>
					<string>ifnotequal</string>
					<string>in</string>
					<string>include</string>
					<string>load</string>
					<string>now</string>
					<string>regroup</string>
					<string>spaceless</string>
					<string>ssi</string>
					<string>templatetag</string>
					<string>url</string>
					<string>widthratio</string>
					<string>with</string>
					<!-- Logic Statements -->
					<string>and</string>
					<string>as</string>
					<string>by</string>
					<string>not</string>
					<string>or</string>
				</keywords>
				<keywords id="Context Variable" color="#DD0000" invert-color="#FF2121" useforautocomplete="no" scope="language.variable">
					<regex>({{|}})</regex>
				</keywords>
				<keywords id="Context Variables" color="#825900" invert-color="#FFD67C" useforautocomplete="no" scope="language.variable">
					<regex>{{ (.*?) }}</regex>
				</keywords>
				<keywords id="Filters" color="#008C8C" invert-color="#73FFFF" useforautocomplete="yes" scope="support.function">
					<regex>(\|[\w_]+)</regex>
				</keywords>
				<keywords id="Double Quoted Strings" type="string" color="#760F15" invert-color="#F0898E" useforautocomplete="no" scope="string.double">
					<regex>(".*?")</regex>
				</keywords>
				<keywords id="Single Quoted Strings" type="string" color="#760F15" invert-color="#F0898E" useforautocomplete="no" scope="string.single">
					<regex>('.*?')</regex>
				</keywords>
                <keywords id="Filter Parameters: Numeric" useforautocomplete="no" scope="constant.numeric">
                    <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
                </keywords>
				<keywords id="Filter Parameters: Strings" color="#003369" invert-color="#95C9FF" scope="string.double">
					<regex>(:".*?")</regex>
					<regex>(:'.*?')</regex>
					<!--<regex>(:\d+)</regex>-->
				</keywords>
            </state>
            <state id="Django Comment" type="comment" color="#236E25" invert-color="#91DC93" font-style="italic" useforautocomplete="no" scope="comment.line.double-slash">
				<begin>
					<regex>{#</regex>
				</begin>
				<end>
				    <regex>#}</regex>
				</end>
			</state>

			<!--  This is the "we do a complete HTML mode and import Ruby everywhere" section -->
			<state-link mode="XML" state="Comment"/>
            <state-link mode="XML" state="CDATA"/>
            <state-link mode="XML" state="Doctype"/>
            <state-link mode="XML" state="Escape"/>
			
			<state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
				<begin>
					<regex>&lt;[ \t]*(?i)style[^>]*></regex>
					<autoend>&lt;/style></autoend>
				</begin>
				<end>
					<regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*></regex>
				</end>
				<state-link state="Django-Template"/>

				<import mode="CSS"/>
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
					<import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
						<import mode="CSS" state="Attribute state" keywords-only="yes"/>
						<state-link state="Django-Template"/>
						<state-link state="CSSAutodocComment"/>
						<state-link state="CSSComment"/>
						<state-link state="CSSString"/>
						<state-link state="CSSSingleString"/>
					</state>
					<state-link state="CSSAutodocComment"/>
					<state-link state="CSSComment"/>
					<state-link state="CSSString"/>
					<state-link state="CSSSingleString"/>
					<state-link state="Django-Template"/>
				</state>

				<import keywords-only="yes"/>

				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>

				<state id="CSSAutodocComment" type="comment" foldable="yes" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Django-Template"/>
				</state>
				<state id="CSSComment" type="comment" foldable="yes" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Django-Template"/>
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Django-Template"/>
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Django-Template"/>
				</state>

			</state>


			<state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
				<begin>
                    <regex>(?:&lt;[ \t]*(?i)script\s*?>)|(?:&lt;[ \t]*(?i)script.+?javascript.*?>)</regex>
					<autoend>&lt;/script></autoend>
				</begin>
				<end>
					<regex>&lt;(?i)/script[^>]*></regex>
				</end>
				<import mode="JavaScript" keywords-only="yes"/>
				<state-link state="Django-Template"/>

				<state id="JSAutodocComment" type="comment" foldable="yes" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSComment" type="comment" foldable="yes" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|.(?=&lt;(?i)/script\s*>)</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSRegular Expressions" type="string" scope="string.regexp.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
					<state-link state="Django-Template"/>
				</state>

				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
					<import mode="JavaScript" keywords-only="yes"/>
					<import mode="Django-Template" state="Inline JavaScript"/>
				</state>
			</state>

			<state id="Self Closing Tags" foldable="no" scope="markup.tag">
            	<begin>
                    <regex>&lt;[ \t]*(?i)(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)</regex>
                </begin>
                <end>
                    <regex>&gt;</regex>
                </end>
                <import state="Tags"/>
            </state>

            <state id="Foldable Tags" containerState="yes" delimiterState="Tags" foldBegin="&lt;[ \t]*(?'xmltagstatename'[-:_\.\w\d]+)(?:.|[\r\n])*(?&lt;![/?])>\Z" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*>" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
				
				<import mode="XML" keywords-only="yes"/>
                <import keywords-only="yes"/>
				<import/>
			</state>

			<state id="Tags" usespellchecking="no" foldState="Foldable Tags" scope="markup.tag">
                <begin>
                    <regex>&lt;</regex>
                </begin>
                <end>
                    <regex>&gt;</regex>
                </end>
				<state-link state="Django-Template"/>
                
                <state id="Javascript Actions" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.default" >
					<begin><regex>(?&lt;=[ \t])(?i)on[\w]+[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>
	                <keywords id="Action Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A([\w-]+)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Action Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Action Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)on[\w-]+([ \t]*=[ \t]*)</regex>
					</keywords>
					
	                <import mode="JavaScript"/>
            	</state>
            	
            	<state id="Links" type="url" useforautocomplete="no" scope="meta.link">
					<begin><regex>(?&lt;=[ \t])(?i)(?:href|src)[ \t]*=[ \t]*"</regex></begin>
					<end><regex>"</regex></end>

					<state-link state="Django-Template"/>
                
					<state id="Javascript in Links" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
						<begin><regex>\A[ \t]*(?i)javascript:</regex></begin>
						<end><regex>(?'unwindend'")</regex></end>
		                <import mode="JavaScript"/> 
					</state>
					
					<keywords id="Link Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
						<regex>\A(\w+)[ \t]*=</regex>
					</keywords>
					
					<keywords id="Link Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
						<regex>(")</regex>
					</keywords>
					
					<keywords id="Link Equals" useforautocomplete="no" scope="markup.tag">
						<regex>\A(?i)\w+([ \t]*=[ \t]*)</regex>
					</keywords>
					
				</state>
            	
               	<state id="Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
	                <state-link state="Django-Template" />
				</state>
				
				<state id="Single Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
	                <state-link state="Django-Template" />
				</state>
				
				<keywords id="Attributes in Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=)</regex>
				</keywords>
            </state>
		</default>
	</states>

</syntax>